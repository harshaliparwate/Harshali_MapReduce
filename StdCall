

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;


public class STDCalls {
	
	public static class MapClass extends Mapper<LongWritable,Text,Text,IntWritable>
	   {
	    Text phoneNum = new Text();
	    IntWritable durationinMinuts = new IntWritable();
		
		public void map(LongWritable key, Text value, Context context)
	      {	  
	    	  
	         try{
	            
	        	 String[] parts = value.toString().split(",");
	        	 
	        	 if(parts[4].equals("1")) {
	        		 
	        		 phoneNum.set(parts[0]);
	        		 
	        		String callEndTime =parts[3];
	        		String callStartTime=parts[2];
	        		
	        		long duration= tomillis(callEndTime) - tomillis(callStartTime);
	        		
	        		durationinMinuts.set((int)(duration/(1000*60)));
	        		 context.write(phoneNum,durationinMinuts);
	        		 
	        	 }
	        	
	         }
	         catch(Exception e)
	         {
	            System.out.println(e.getMessage());
	         }
	      }
		
		
		
		
		//function to count time in seconds
		
		 private  long tomillis(String date)
		{
			SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			
			Date dtfrmt =null;
			
			try
			{
				dtfrmt=format.parse(date);
			}
			
			catch(ParseException e)
			
			{
			 e.printStackTrace();	
			}
			
			return dtfrmt.getTime();
			 
		}
	  
		 
	   }
		
	   
	

	  public static class ReduceClass extends Reducer<Text,IntWritable,Text,IntWritable>
	   {
		    private IntWritable result = new IntWritable();
		    
		    public void reduce(Text key, Iterable<IntWritable> values,Context context) throws IOException, InterruptedException {
		      int sum = 0;
				
		         for (IntWritable val : values)
		         {       	
		        	sum += val.get();      
		         }
		         
		         
		         
		         if(sum>=60)
		         {
		        	 result.set(sum);
		        	 context.write(key,result);
		         }
		     		      //context.write(key, new LongWritable(sum));
		      
		    }
	   }
	  
	  public static void main(String[] args) throws Exception {
		    Configuration conf = new Configuration();
		    //conf.set("name", "value")
		    //conf.set("mapreduce.input.fileinputformat.split.minsize", "134217728");
		    Job job = Job.getInstance(conf, "Volume Count");
		    job.setJarByClass(STDCalls.class);
		    job.setMapperClass(MapClass.class);
		    //job.setCombinerClass(ReduceClass.class);
		    job.setReducerClass(ReduceClass.class);
		    //job.setNumReduceTasks(0);
		    job.setOutputKeyClass(Text.class);
		    job.setOutputValueClass(IntWritable.class);
		    FileInputFormat.addInputPath(job, new Path(args[0]));
		    FileOutputFormat.setOutputPath(job, new Path(args[1]));
		    System.exit(job.waitForCompletion(true) ? 0 : 1);
		  }
}
